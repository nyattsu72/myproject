/*mixin*/
// メディアクエリー
@mixin mq($breakpoint: sp) {
  @media #{map-get($breakpoints, $breakpoint)} {
    @content;
  }
}

// @mixin breakPointTab {
//   @media screen and (max-width: $breakpointTab) {
//     @content;
//   }
// }

// @mixin breakPointSP {
//   @media screen and (max-width: $breakpointSP) {
//     @content;
//   }
// }

@mixin clearfix() {
  &:after {
    display: block;
    clear: both;
    content: "";
  }
}

/*function*/
//小数点を丸める関数
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

// letter-spacing計算
@function lsp($letter_spacing, $font_size) {
  @return $letter_spacing / $font_size * 1em;
}
